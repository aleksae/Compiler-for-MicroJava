
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 27 16:25:46 CEST 2024
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Thu Jun 27 16:25:46 CEST 2024
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\040\011\000\002\002\004\000\002\037" +
    "\003\000\002\003\013\000\002\003\002\000\002\010\013" +
    "\000\002\010\002\000\002\041\004\000\002\011\007\000" +
    "\002\011\005\000\002\011\002\000\002\044\003\000\002" +
    "\012\010\000\002\012\006\000\002\012\002\000\002\062" +
    "\003\000\002\062\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\005\011\000\002\045\003\000" +
    "\002\006\007\000\002\006\002\000\002\042\010\000\002" +
    "\042\004\000\002\042\004\000\002\042\006\000\002\007" +
    "\007\000\002\007\005\000\002\007\002\000\002\043\003" +
    "\000\002\013\004\000\002\013\002\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\061\006\000\002" +
    "\061\003\000\002\057\005\000\002\057\004\000\002\060" +
    "\005\000\002\060\002\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\055\004\000\002\056\005\000\002\056\002\000\002" +
    "\050\003\000\002\050\005\000\002\050\006\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\005" +
    "\000\002\050\005\000\002\050\006\000\002\051\005\000" +
    "\002\051\005\000\002\051\004\000\002\035\004\000\002" +
    "\036\005\000\002\036\002\000\002\046\006\000\002\046" +
    "\003\000\002\047\005\000\002\047\006\000\002\047\003" +
    "\000\002\053\004\000\002\053\003\000\002\053\003\000" +
    "\002\054\004\000\002\054\004\000\002\054\005\000\002" +
    "\054\003\000\002\054\003\000\002\026\011\000\002\030" +
    "\012\000\002\030\014\000\002\023\005\000\002\023\003" +
    "\000\002\023\002\000\002\052\004\000\002\052\007\000" +
    "\002\052\011\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\005\000\002\052\007\000\002\052" +
    "\007\000\002\052\011\000\002\052\004\000\002\052\005" +
    "\000\002\052\013\000\002\052\004\000\002\031\003\000" +
    "\002\034\004\000\002\034\003\000\002\032\003\000\002" +
    "\032\002\000\002\033\005\000\002\033\003\000\002\071" +
    "\003\000\002\071\002\000\002\014\004\000\002\014\002" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\064\004\000\002\067\005\000\002\067" +
    "\002\000\002\070\004\000\002\066\005\000\002\066\002" +
    "\000\002\065\003\000\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\004\005\005\001\002\000\004\002\375\001" +
    "\002\000\004\061\006\001\002\000\014\003\uffff\026\uffff" +
    "\031\uffff\050\uffff\061\uffff\001\002\000\014\003\ufffd\026" +
    "\ufffd\031\ufffd\050\010\061\ufffd\001\002\000\004\061\365" +
    "\001\002\000\012\003\015\026\uffee\031\012\061\017\001" +
    "\002\000\004\061\017\001\002\000\012\003\015\026\uffee" +
    "\031\012\061\017\001\002\000\004\061\332\001\002\000" +
    "\006\013\327\021\330\001\002\000\012\003\015\026\uffee" +
    "\031\012\061\017\001\002\000\012\006\uffdb\016\323\034" +
    "\uffdb\061\uffdb\001\002\000\004\026\021\001\002\000\010" +
    "\015\ufffb\052\ufffb\061\ufffb\001\002\000\010\015\025\052" +
    "\027\061\024\001\002\000\004\061\322\001\002\000\004" +
    "\061\ufff2\001\002\000\004\061\ufff1\001\002\000\004\006" +
    "\030\001\002\000\004\002\001\001\002\000\006\007\ufff7" +
    "\061\017\001\002\000\004\007\050\001\002\000\004\061" +
    "\034\001\002\000\010\007\ufff3\013\036\034\035\001\002" +
    "\000\010\007\ufff6\013\ufff6\034\ufff6\001\002\000\004\054" +
    "\046\001\002\000\004\061\017\001\002\000\004\007\ufff8" +
    "\001\002\000\004\061\034\001\002\000\010\007\ufff3\013" +
    "\036\034\042\001\002\000\004\054\044\001\002\000\004" +
    "\007\ufff4\001\002\000\006\007\ufff3\013\036\001\002\000" +
    "\004\007\ufff5\001\002\000\006\007\ufff3\013\036\001\002" +
    "\000\004\007\ufff9\001\002\000\010\003\015\026\uffe0\061" +
    "\017\001\002\000\010\003\015\026\uffe0\061\017\001\002" +
    "\000\004\026\053\001\002\000\032\003\uff94\011\uff94\014" +
    "\uff94\017\uff94\026\uff94\034\uff94\037\uff94\041\uff94\052\uff94" +
    "\055\uff94\061\uff94\065\uff94\001\002\000\032\003\074\011" +
    "\064\014\073\017\076\026\067\034\072\037\071\041\056" +
    "\052\063\055\057\061\060\065\066\001\002\000\016\006" +
    "\301\025\136\027\303\034\134\042\277\057\300\001\002" +
    "\000\004\006\273\001\002\000\004\021\272\001\002\000" +
    "\066\004\uffbe\006\uffbe\007\uffbe\012\uffbe\013\uffbe\016\267" +
    "\021\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\036\uffbe\040\uffbe\042\uffbe\043\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\051\uffbe\054\uffbe\056\uffbe\057\uffbe\065" +
    "\uffbe\001\002\000\004\021\266\001\002\000\004\006\251" +
    "\001\002\000\010\015\ufffc\052\ufffc\061\ufffc\001\002\000" +
    "\024\006\114\021\247\023\105\030\102\061\060\062\112" +
    "\063\110\064\107\067\103\001\002\000\010\007\uffb8\013" +
    "\uffb8\021\uffb8\001\002\000\004\006\215\001\002\000\032" +
    "\003\074\011\064\014\073\017\076\026\067\034\072\037" +
    "\071\041\056\052\210\055\057\061\060\065\066\001\002" +
    "\000\064\004\uffbb\006\uffbb\007\uffbb\012\uffbb\013\uffbb\021" +
    "\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\036\uffbb\040\uffbb\042\uffbb\043\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\051\uffbb\054\uffbb\056\uffbb\057\uffbb\065\uffbb" +
    "\001\002\000\004\021\207\001\002\000\010\013\176\036" +
    "\uffad\061\uffad\001\002\000\004\006\101\001\002\000\004" +
    "\021\100\001\002\000\032\003\uff95\011\uff95\014\uff95\017" +
    "\uff95\026\uff95\034\uff95\037\uff95\041\uff95\052\uff95\055\uff95" +
    "\061\uff95\065\uff95\001\002\000\004\006\uff9e\001\002\000" +
    "\010\007\uffb9\013\uffb9\021\uffb9\001\002\000\034\003\uff9f" +
    "\011\uff9f\014\uff9f\017\uff9f\026\uff9f\034\uff9f\037\uff9f\041" +
    "\uff9f\052\uff9f\055\uff9f\061\uff9f\065\uff9f\066\uff9f\001\002" +
    "\000\022\006\114\023\105\030\102\061\060\062\112\063" +
    "\110\064\107\067\103\001\002\000\020\006\114\023\105" +
    "\061\060\062\112\063\110\064\107\067\103\001\002\000" +
    "\004\006\171\001\002\000\006\007\164\013\163\001\002" +
    "\000\004\061\017\001\002\000\054\004\uffce\006\135\007" +
    "\uffce\012\uffce\013\uffce\021\uffce\024\uffce\025\136\030\uffce" +
    "\032\uffce\033\uffce\034\134\036\uffce\040\uffce\043\uffce\045" +
    "\uffce\046\uffce\047\uffce\051\uffce\054\uffce\056\uffce\001\002" +
    "\000\046\004\uffc9\007\uffc9\012\uffc9\013\uffc9\021\uffc9\024" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\036\uffc9\040\uffc9\043\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\051\uffc9\054\uffc9\056\uffc9\001" +
    "\002\000\046\004\uffca\007\uffca\012\uffca\013\uffca\021\uffca" +
    "\024\uffca\030\uffca\032\uffca\033\uffca\036\uffca\040\uffca\043" +
    "\uffca\045\uffca\046\uffca\047\uffca\051\uffca\054\uffca\056\uffca" +
    "\001\002\000\040\004\uffd7\007\uffd7\012\127\013\uffd7\021" +
    "\uffd7\030\130\032\uffd7\033\uffd7\040\uffd7\043\uffd7\045\uffd7" +
    "\046\uffd7\051\uffd7\054\uffd7\056\uffd7\001\002\000\046\004" +
    "\uffcb\007\uffcb\012\uffcb\013\uffcb\021\uffcb\024\uffcb\030\uffcb" +
    "\032\uffcb\033\uffcb\036\uffcb\040\uffcb\043\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\051\uffcb\054\uffcb\056\uffcb\001\002\000\046" +
    "\004\uffcf\007\uffcf\012\uffcf\013\uffcf\021\uffcf\024\117\030" +
    "\uffcf\032\uffcf\033\uffcf\036\123\040\uffcf\043\uffcf\045\uffcf" +
    "\046\uffcf\047\120\051\uffcf\054\uffcf\056\uffcf\001\002\000" +
    "\022\006\114\023\105\030\102\061\060\062\112\063\110" +
    "\064\107\067\103\001\002\000\004\007\116\001\002\000" +
    "\046\004\uffc7\007\uffc7\012\uffc7\013\uffc7\021\uffc7\024\uffc7" +
    "\030\uffc7\032\uffc7\033\uffc7\036\uffc7\040\uffc7\043\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\051\uffc7\054\uffc7\056\uffc7\001\002" +
    "\000\020\006\uffd4\023\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\067\uffd4\001\002\000\020\006\uffd2\023\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\067\uffd2\001\002\000\040\004" +
    "\uffd1\007\uffd1\012\uffd1\013\uffd1\021\uffd1\030\uffd1\032\uffd1" +
    "\033\uffd1\040\uffd1\043\uffd1\045\uffd1\046\uffd1\051\uffd1\054" +
    "\uffd1\056\uffd1\001\002\000\020\006\114\023\105\061\060" +
    "\062\112\063\110\064\107\067\103\001\002\000\020\006" +
    "\uffd3\023\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\067\uffd3" +
    "\001\002\000\046\004\uffcf\007\uffcf\012\uffcf\013\uffcf\021" +
    "\uffcf\024\117\030\uffcf\032\uffcf\033\uffcf\036\123\040\uffcf" +
    "\043\uffcf\045\uffcf\046\uffcf\047\120\051\uffcf\054\uffcf\056" +
    "\uffcf\001\002\000\040\004\uffd0\007\uffd0\012\uffd0\013\uffd0" +
    "\021\uffd0\030\uffd0\032\uffd0\033\uffd0\040\uffd0\043\uffd0\045" +
    "\uffd0\046\uffd0\051\uffd0\054\uffd0\056\uffd0\001\002\000\034" +
    "\004\uffd9\007\uffd9\013\uffd9\021\uffd9\032\uffd9\033\uffd9\040" +
    "\uffd9\043\uffd9\045\uffd9\046\uffd9\051\uffd9\054\uffd9\056\uffd9" +
    "\001\002\000\020\006\uffd6\023\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\067\uffd6\001\002\000\020\006\uffd5\023\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\067\uffd5\001\002\000" +
    "\020\006\114\023\105\061\060\062\112\063\110\064\107" +
    "\067\103\001\002\000\040\004\uffd7\007\uffd7\012\127\013" +
    "\uffd7\021\uffd7\030\130\032\uffd7\033\uffd7\040\uffd7\043\uffd7" +
    "\045\uffd7\046\uffd7\051\uffd7\054\uffd7\056\uffd7\001\002\000" +
    "\034\004\uffd8\007\uffd8\013\uffd8\021\uffd8\032\uffd8\033\uffd8" +
    "\040\uffd8\043\uffd8\045\uffd8\046\uffd8\051\uffd8\054\uffd8\056" +
    "\uffd8\001\002\000\022\006\114\023\105\030\102\061\060" +
    "\062\112\063\110\064\107\067\103\001\002\000\024\006" +
    "\114\007\141\023\105\030\102\061\060\062\112\063\110" +
    "\064\107\067\103\001\002\000\004\061\137\001\002\000" +
    "\064\004\uffbd\006\uffbd\007\uffbd\012\uffbd\013\uffbd\021\uffbd" +
    "\024\uffbd\025\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\036\uffbd\040\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\051\uffbd\054\uffbd\056\uffbd\057\uffbd\065\uffbd\001" +
    "\002\000\006\007\uffc0\013\144\001\002\000\046\004\uffcd" +
    "\007\uffcd\012\uffcd\013\uffcd\021\uffcd\024\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\036\uffcd\040\uffcd\043\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\051\uffcd\054\uffcd\056\uffcd\001\002\000\004\007" +
    "\143\001\002\000\046\004\uffcc\007\uffcc\012\uffcc\013\uffcc" +
    "\021\uffcc\024\uffcc\030\uffcc\032\uffcc\033\uffcc\036\uffcc\040" +
    "\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\054\uffcc" +
    "\056\uffcc\001\002\000\022\006\114\023\105\030\102\061" +
    "\060\062\112\063\110\064\107\067\103\001\002\000\004" +
    "\007\uffc2\001\002\000\006\007\uffc0\013\144\001\002\000" +
    "\004\007\uffc1\001\002\000\004\054\151\001\002\000\064" +
    "\004\uffbc\006\uffbc\007\uffbc\012\uffbc\013\uffbc\021\uffbc\024" +
    "\uffbc\025\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\036\uffbc\040\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\051\uffbc\054\uffbc\056\uffbc\057\uffbc\065\uffbc\001\002" +
    "\000\006\006\155\034\153\001\002\000\022\006\114\023" +
    "\105\030\102\061\060\062\112\063\110\064\107\067\103" +
    "\001\002\000\046\004\uffc8\007\uffc8\012\uffc8\013\uffc8\021" +
    "\uffc8\024\uffc8\030\uffc8\032\uffc8\033\uffc8\036\uffc8\040\uffc8" +
    "\043\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\054\uffc8\056" +
    "\uffc8\001\002\000\024\006\114\007\156\023\105\030\102" +
    "\061\060\062\112\063\110\064\107\067\103\001\002\000" +
    "\046\004\uffc3\007\uffc3\012\uffc3\013\uffc3\021\uffc3\024\uffc3" +
    "\030\uffc3\032\uffc3\033\uffc3\036\uffc3\040\uffc3\043\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\051\uffc3\054\uffc3\056\uffc3\001\002" +
    "\000\004\007\160\001\002\000\046\004\uffc4\007\uffc4\012" +
    "\uffc4\013\uffc4\021\uffc4\024\uffc4\030\uffc4\032\uffc4\033\uffc4" +
    "\036\uffc4\040\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\051" +
    "\uffc4\054\uffc4\056\uffc4\001\002\000\004\054\162\001\002" +
    "\000\046\004\uffc5\007\uffc5\012\uffc5\013\uffc5\021\uffc5\024" +
    "\uffc5\030\uffc5\032\uffc5\033\uffc5\036\uffc5\040\uffc5\043\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\051\uffc5\054\uffc5\056\uffc5\001" +
    "\002\000\004\062\166\001\002\000\004\021\165\001\002" +
    "\000\034\003\uffa4\011\uffa4\014\uffa4\017\uffa4\026\uffa4\034" +
    "\uffa4\037\uffa4\041\uffa4\052\uffa4\055\uffa4\061\uffa4\065\uffa4" +
    "\066\uffa4\001\002\000\004\007\167\001\002\000\004\021" +
    "\170\001\002\000\034\003\uffa3\011\uffa3\014\uffa3\017\uffa3" +
    "\026\uffa3\034\uffa3\037\uffa3\041\uffa3\052\uffa3\055\uffa3\061" +
    "\uffa3\065\uffa3\066\uffa3\001\002\000\022\006\114\023\105" +
    "\030\102\061\060\062\112\063\110\064\107\067\103\001" +
    "\002\000\004\007\173\001\002\000\046\004\uffc6\007\uffc6" +
    "\012\uffc6\013\uffc6\021\uffc6\024\uffc6\030\uffc6\032\uffc6\033" +
    "\uffc6\036\uffc6\040\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\051\uffc6\054\uffc6\056\uffc6\001\002\000\040\004\uffd7\007" +
    "\uffd7\012\127\013\uffd7\021\uffd7\030\130\032\uffd7\033\uffd7" +
    "\040\uffd7\043\uffd7\045\uffd7\046\uffd7\051\uffd7\054\uffd7\056" +
    "\uffd7\001\002\000\034\004\uffda\007\uffda\013\uffda\021\uffda" +
    "\032\uffda\033\uffda\040\uffda\043\uffda\045\uffda\046\uffda\051" +
    "\uffda\054\uffda\056\uffda\001\002\000\006\036\uffae\061\uffae" +
    "\001\002\000\006\036\201\061\060\001\002\000\010\013" +
    "\206\025\136\034\134\001\002\000\004\061\060\001\002" +
    "\000\010\025\136\034\134\054\203\001\002\000\004\027" +
    "\204\001\002\000\004\061\060\001\002\000\014\007\uffb2" +
    "\013\uffb2\021\uffb2\025\136\034\134\001\002\000\006\036" +
    "\uffaf\061\uffaf\001\002\000\034\003\uffa9\011\uffa9\014\uffa9" +
    "\017\uffa9\026\uffa9\034\uffa9\037\uffa9\041\uffa9\052\uffa9\055" +
    "\uffa9\061\uffa9\065\uffa9\066\uffa9\001\002\000\034\003\uffa2" +
    "\011\uffa2\014\uffa2\017\uffa2\026\uffa2\034\uffa2\037\uffa2\041" +
    "\uffa2\052\uffa2\055\uffa2\061\uffa2\065\uffa2\066\uffa2\001\002" +
    "\000\032\003\074\011\064\014\073\017\076\026\067\034" +
    "\072\037\071\041\056\052\213\055\057\061\060\065\066" +
    "\001\002\000\032\003\uff9c\011\uff9c\014\uff9c\017\uff9c\026" +
    "\uff9c\034\uff9c\037\uff9c\041\uff9c\052\uff9c\055\uff9c\061\uff9c" +
    "\065\uff9c\001\002\000\034\003\uffa1\011\uffa1\014\uffa1\017" +
    "\uffa1\026\uffa1\034\uffa1\037\uffa1\041\uffa1\052\uffa1\055\uffa1" +
    "\061\uffa1\065\uffa1\066\uffa1\001\002\000\032\003\uff9d\011" +
    "\uff9d\014\uff9d\017\uff9d\026\uff9d\034\uff9d\037\uff9d\041\uff9d" +
    "\052\uff9d\055\uff9d\061\uff9d\065\uff9d\001\002\000\022\006" +
    "\114\023\105\030\102\061\060\062\112\063\110\064\107" +
    "\067\103\001\002\000\030\007\uff86\021\uff86\032\uff86\033" +
    "\243\040\237\043\240\045\241\046\236\051\242\054\uff86" +
    "\056\uff86\001\002\000\004\007\232\001\002\000\012\007" +
    "\uff87\032\226\054\uff87\056\uff87\001\002\000\010\007\uff8a" +
    "\054\uff8a\056\223\001\002\000\006\007\uff8c\054\uff8c\001" +
    "\002\000\022\006\114\023\105\030\102\061\060\062\112" +
    "\063\110\064\107\067\103\001\002\000\010\007\uff8a\054" +
    "\uff8a\056\223\001\002\000\006\007\uff8b\054\uff8b\001\002" +
    "\000\022\006\114\023\105\030\102\061\060\062\112\063" +
    "\110\064\107\067\103\001\002\000\010\007\uff89\054\uff89" +
    "\056\uff89\001\002\000\012\007\uff87\032\226\054\uff87\056" +
    "\uff87\001\002\000\010\007\uff88\054\uff88\056\uff88\001\002" +
    "\000\030\003\074\011\064\014\073\017\076\026\067\034" +
    "\072\037\071\041\056\055\057\061\060\065\066\001\002" +
    "\000\034\003\uffab\011\uffab\014\uffab\017\uffab\026\uffab\034" +
    "\uffab\037\uffab\041\uffab\052\uffab\055\uffab\061\uffab\065\uffab" +
    "\066\234\001\002\000\030\003\074\011\064\014\073\017" +
    "\076\026\067\034\072\037\071\041\056\055\057\061\060" +
    "\065\066\001\002\000\034\003\uffaa\011\uffaa\014\uffaa\017" +
    "\uffaa\026\uffaa\034\uffaa\037\uffaa\041\uffaa\052\uffaa\055\uffaa" +
    "\061\uffaa\065\uffaa\066\uffaa\001\002\000\022\006\uff90\023" +
    "\uff90\030\uff90\061\uff90\062\uff90\063\uff90\064\uff90\067\uff90" +
    "\001\002\000\022\006\uff92\023\uff92\030\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\067\uff92\001\002\000\022\006\uff8f" +
    "\023\uff8f\030\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\067" +
    "\uff8f\001\002\000\022\006\uff8d\023\uff8d\030\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\067\uff8d\001\002\000\022\006" +
    "\uff91\023\uff91\030\uff91\061\uff91\062\uff91\063\uff91\064\uff91" +
    "\067\uff91\001\002\000\022\006\uff8e\023\uff8e\030\uff8e\061" +
    "\uff8e\062\uff8e\063\uff8e\064\uff8e\067\uff8e\001\002\000\022" +
    "\006\114\023\105\030\102\061\060\062\112\063\110\064" +
    "\107\067\103\001\002\000\014\007\uff85\021\uff85\032\uff85" +
    "\054\uff85\056\uff85\001\002\000\004\021\250\001\002\000" +
    "\034\003\uffa7\011\uffa7\014\uffa7\017\uffa7\026\uffa7\034\uffa7" +
    "\037\uffa7\041\uffa7\052\uffa7\055\uffa7\061\uffa7\065\uffa7\066" +
    "\uffa7\001\002\000\034\003\uffa6\011\uffa6\014\uffa6\017\uffa6" +
    "\026\uffa6\034\uffa6\037\uffa6\041\uffa6\052\uffa6\055\uffa6\061" +
    "\uffa6\065\uffa6\066\uffa6\001\002\000\010\021\uff9a\034\072" +
    "\061\060\001\002\000\010\007\uff98\013\uff98\021\uff98\001" +
    "\002\000\010\007\uff9b\013\264\021\uff9b\001\002\000\004" +
    "\021\255\001\002\000\024\006\114\021\uff96\023\105\030" +
    "\102\061\060\062\112\063\110\064\107\067\103\001\002" +
    "\000\004\021\uff97\001\002\000\004\021\260\001\002\000" +
    "\010\007\uff9a\034\072\061\060\001\002\000\004\007\262" +
    "\001\002\000\030\003\074\011\064\014\073\017\076\026" +
    "\067\034\072\037\071\041\056\055\057\061\060\065\066" +
    "\001\002\000\034\003\uffa0\011\uffa0\014\uffa0\017\uffa0\026" +
    "\uffa0\034\uffa0\037\uffa0\041\uffa0\052\uffa0\055\uffa0\061\uffa0" +
    "\065\uffa0\066\uffa0\001\002\000\006\034\072\061\060\001" +
    "\002\000\010\007\uff99\013\uff99\021\uff99\001\002\000\034" +
    "\003\uffac\011\uffac\014\uffac\017\uffac\026\uffac\034\uffac\037" +
    "\uffac\041\uffac\052\uffac\055\uffac\061\uffac\065\uffac\066\uffac" +
    "\001\002\000\004\016\270\001\002\000\004\061\271\001" +
    "\002\000\064\004\uffbf\006\uffbf\007\uffbf\012\uffbf\013\uffbf" +
    "\021\uffbf\024\uffbf\025\uffbf\027\uffbf\030\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\036\uffbf\040\uffbf\042\uffbf\043\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\051\uffbf\054\uffbf\056\uffbf\057\uffbf\065" +
    "\uffbf\001\002\000\034\003\uffa8\011\uffa8\014\uffa8\017\uffa8" +
    "\026\uffa8\034\uffa8\037\uffa8\041\uffa8\052\uffa8\055\uffa8\061" +
    "\uffa8\065\uffa8\066\uffa8\001\002\000\004\061\060\001\002" +
    "\000\010\007\275\025\136\034\134\001\002\000\004\021" +
    "\276\001\002\000\034\003\uffa5\011\uffa5\014\uffa5\017\uffa5" +
    "\026\uffa5\034\uffa5\037\uffa5\041\uffa5\052\uffa5\055\uffa5\061" +
    "\uffa5\065\uffa5\066\uffa5\001\002\000\010\007\uffb4\013\uffb4" +
    "\021\uffb4\001\002\000\010\007\uffb3\013\uffb3\021\uffb3\001" +
    "\002\000\024\006\114\007\316\023\105\030\102\061\060" +
    "\062\112\063\110\064\107\067\103\001\002\000\010\007" +
    "\uffba\013\uffba\021\uffba\001\002\000\024\006\114\023\105" +
    "\030\102\034\304\061\060\062\112\063\110\064\107\067" +
    "\103\001\002\000\004\017\306\001\002\000\010\007\uffb7" +
    "\013\uffb7\021\uffb7\001\002\000\022\006\114\023\105\030" +
    "\102\061\060\062\112\063\110\064\107\067\103\001\002" +
    "\000\004\004\310\001\002\000\004\061\060\001\002\000" +
    "\012\025\136\034\134\054\312\065\313\001\002\000\010" +
    "\007\uffb1\013\uffb1\021\uffb1\001\002\000\022\006\114\023" +
    "\105\030\102\061\060\062\112\063\110\064\107\067\103" +
    "\001\002\000\004\054\315\001\002\000\010\007\uffb0\013" +
    "\uffb0\021\uffb0\001\002\000\010\007\uffb6\013\uffb6\021\uffb6" +
    "\001\002\000\004\007\320\001\002\000\010\007\uffb5\013" +
    "\uffb5\021\uffb5\001\002\000\004\026\uffe1\001\002\000\004" +
    "\006\ufffa\001\002\000\004\016\324\001\002\000\004\061" +
    "\325\001\002\000\010\006\uffdc\034\uffdc\061\uffdc\001\002" +
    "\000\004\026\uffef\001\002\000\012\003\uffe8\026\uffe8\031" +
    "\uffe8\061\uffe8\001\002\000\012\003\uffe7\026\uffe7\031\uffe7" +
    "\061\uffe7\001\002\000\010\013\uffe3\021\uffe3\034\334\001" +
    "\002\000\010\013\uffe2\021\uffe2\034\uffe2\001\002\000\006" +
    "\013\337\021\344\001\002\000\004\054\335\001\002\000" +
    "\006\013\uffe3\021\uffe3\001\002\000\006\013\337\021\340" +
    "\001\002\000\004\061\332\001\002\000\012\003\uffe9\026" +
    "\uffe9\031\uffe9\061\uffe9\001\002\000\010\013\uffe4\021\uffe4" +
    "\034\342\001\002\000\004\054\343\001\002\000\006\013" +
    "\uffe5\021\uffe5\001\002\000\012\003\uffe6\026\uffe6\031\uffe6" +
    "\061\uffe6\001\002\000\004\026\ufff0\001\002\000\004\061" +
    "\350\001\002\000\004\027\351\001\002\000\004\027\uffec" +
    "\001\002\000\010\062\352\063\355\064\354\001\002\000" +
    "\006\013\uffdd\021\uffdd\001\002\000\006\013\356\021\uffea" +
    "\001\002\000\006\013\uffdf\021\uffdf\001\002\000\006\013" +
    "\uffde\021\uffde\001\002\000\004\061\350\001\002\000\004" +
    "\021\360\001\002\000\012\003\uffed\026\uffed\031\uffed\061" +
    "\uffed\001\002\000\004\027\362\001\002\000\010\062\352" +
    "\063\355\064\354\001\002\000\006\013\356\021\uffea\001" +
    "\002\000\004\021\uffeb\001\002\000\004\026\366\001\002" +
    "\000\012\003\015\026\uffee\031\012\061\017\001\002\000" +
    "\004\026\370\001\002\000\010\015\ufffb\052\ufffb\061\ufffb" +
    "\001\002\000\010\015\025\052\372\061\024\001\002\000" +
    "\004\052\373\001\002\000\014\003\ufffd\026\ufffd\031\ufffd" +
    "\050\010\061\ufffd\001\002\000\012\003\ufffe\026\ufffe\031" +
    "\ufffe\061\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\004\040\003\001\001\000\002\001\001\000" +
    "\004\037\006\001\001\000\002\001\001\000\004\003\010" +
    "\001\001\000\002\001\001\000\012\004\017\005\012\042" +
    "\015\061\013\001\001\000\004\061\345\001\001\000\012" +
    "\004\344\005\012\042\015\061\013\001\001\000\004\043" +
    "\330\001\001\000\002\001\001\000\012\004\325\005\012" +
    "\042\015\061\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\021\001\001\000\006\041\025\062\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\030" +
    "\061\031\001\001\000\002\001\001\000\004\044\032\001" +
    "\001\000\004\012\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\037\001\001\000\002\001\001\000" +
    "\004\044\040\001\001\000\004\012\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\044\001\001\000" +
    "\002\001\001\000\004\012\046\001\001\000\002\001\001" +
    "\000\010\013\051\042\050\061\013\001\001\000\010\013" +
    "\320\042\050\061\013\001\001\000\002\001\001\000\004" +
    "\014\053\001\001\000\020\026\076\030\064\031\061\046" +
    "\067\047\054\052\074\053\060\001\001\000\004\054\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\046\067\047\105\050\112\055\110\057\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\026\076" +
    "\030\064\031\061\034\210\046\067\047\054\052\211\053" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\046\067\047\105\050\112\055\110\057" +
    "\103\001\001\000\012\046\067\047\105\050\112\055\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\130\060\125\001\001\000\002\001" +
    "\001\000\006\017\121\056\120\001\001\000\014\046\067" +
    "\047\105\050\112\055\110\057\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\067\047\105\050\123\001" +
    "\001\000\002\001\001\000\006\017\121\056\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\046\067\047\105\050\112\055\131" +
    "\001\001\000\006\016\130\060\132\001\001\000\002\001" +
    "\001\000\014\046\067\047\105\050\112\055\110\057\147" +
    "\001\001\000\016\035\141\046\067\047\105\050\112\055" +
    "\110\057\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\046\067\047\105\050\112" +
    "\055\110\057\145\001\001\000\002\001\001\000\004\036" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\153\001\001\000\014\046\067\047" +
    "\105\050\112\055\110\057\160\001\001\000\002\001\001" +
    "\000\016\035\156\046\067\047\105\050\112\055\110\057" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\046\067\047" +
    "\105\050\112\055\110\057\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\130\060\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\067\047\177" +
    "\001\001\000\002\001\001\000\006\046\067\047\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\067" +
    "\047\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\076\030\064" +
    "\031\061\046\067\047\054\052\213\053\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\046\067\047\105\050\112\055\110\057\215\064\216\065" +
    "\217\070\220\001\001\000\004\021\243\001\001\000\002" +
    "\001\001\000\004\066\226\001\001\000\004\067\221\001" +
    "\001\000\002\001\001\000\020\046\067\047\105\050\112" +
    "\055\110\057\215\065\217\070\223\001\001\000\004\067" +
    "\224\001\001\000\002\001\001\000\016\046\067\047\105" +
    "\050\112\055\110\057\215\065\227\001\001\000\002\001" +
    "\001\000\004\066\230\001\001\000\002\001\001\000\020" +
    "\026\076\030\064\031\061\046\067\047\054\052\232\053" +
    "\060\001\001\000\002\001\001\000\020\026\076\030\064" +
    "\031\061\046\067\047\054\052\234\053\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\046\067\047\105\050\112\055\110\057\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\026\076\030\064\032\253" +
    "\033\252\046\067\047\054\053\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\046\067" +
    "\047\105\050\112\055\110\057\215\065\255\071\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\026\076" +
    "\030\064\032\260\033\252\046\067\047\054\053\251\001" +
    "\001\000\002\001\001\000\020\026\076\030\064\031\061" +
    "\046\067\047\054\052\262\053\060\001\001\000\002\001" +
    "\001\000\014\026\076\030\064\046\067\047\054\053\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\067\047\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\035\316\046\067\047\105\050\112\055" +
    "\110\057\137\001\001\000\002\001\001\000\014\046\067" +
    "\047\105\050\112\055\110\057\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\046\067\047\105\050\112" +
    "\055\110\057\306\001\001\000\002\001\001\000\006\046" +
    "\067\047\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\046\067\047\105\050\112\055\110\057\215\064" +
    "\313\065\217\070\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\335\001\001\000\002\001\001\000\004\043\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\352\001\001\000\002\001\001\000\004" +
    "\006\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\362\001\001\000\004\006" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\366\005\012\042\015\061\013\001\001\000\002\001" +
    "\001\000\004\010\370\001\001\000\006\041\025\062\022" +
    "\001\001\000\002\001\001\000\004\003\373\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti. U pitanju je simbol "+cur_token.value.toString(), cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactDual(e1, R1, e2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr ec = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactSingle(ec); RESULT.setLine(ecleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CondFactRepeater ::= 
            {
              CondFactRepeater RESULT = null;
		 RESULT=new NoCondFactRep(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*CondFactRepeater*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CondFactRepeater ::= AND CondFact CondFactRepeater 
            {
              CondFactRepeater RESULT = null;
		int cfRFleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cfRFright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondFact cfRF = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cfrRleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cfrRright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFactRepeater cfrR = (CondFactRepeater)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactRepFull(cfRF, cfrR); RESULT.setLine(cfRFleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*CondFactRepeater*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CondTerm ::= CondFact CondFactRepeater 
            {
              CondTerm RESULT = null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondFact cf = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cfrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cfrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFactRepeater cfr = (CondFactRepeater)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTerm(cf, cfr); RESULT.setLine(cfleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CondTermRepeater ::= 
            {
              CondTermRepeater RESULT = null;
		 RESULT=new NoCondTermRep(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*CondTermRepeater*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CondTermRepeater ::= OR CondTerm CondTermRepeater 
            {
              CondTermRepeater RESULT = null;
		int cdFleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cdFright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondTerm cdF = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cdFRleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cdFRright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTermRepeater cdFR = (CondTermRepeater)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermRepFull(cdF, cdFR); RESULT.setLine(cdFleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*CondTermRepeater*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Condition ::= CondTerm CondTermRepeater 
            {
              Condition RESULT = null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondTerm cd = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTermRepeater cdr = (CondTermRepeater)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition(cd, cdr); RESULT.setLine(cdleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= LEQ 
            {
              Relop RESULT = null;
		 RESULT=new RelopDerived4(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new RelopDerived3(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Relop ::= GEQ 
            {
              Relop RESULT = null;
		 RESULT=new RelopDerived2(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new RelopDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Relop ::= NOTEQUAL 
            {
              Relop RESULT = null;
		 RESULT=new RelopNotEq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Relop ::= EQUALS 
            {
              Relop RESULT = null;
		 RESULT=new RelopEq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Label ::= IDENT 
            {
              Label RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new LabelDerived1(I1); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*Label*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RepeatStatement ::= 
            {
              RepeatStatement RESULT = null;
		 RESULT=new NoRepeatStmnt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*RepeatStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RepeatStatement ::= RepeatStatement Statement 
            {
              RepeatStatement RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		RepeatStatement R1 = (RepeatStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RepeatStmnt(R1, S2); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*RepeatStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OptionalCondFactFor ::= 
            {
              OptionalCondFactFor RESULT = null;
		 RESULT=new OptionalCondFactForDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*OptionalCondFactFor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptionalCondFactFor ::= CondFact 
            {
              OptionalCondFactFor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OptCondFactFor(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*OptionalCondFactFor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorStatementList ::= DesignatorStatement 
            {
              DesignatorStatementList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementListDerived2(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*DesignatorStatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DesignatorStatementList ::= DesignatorStatementList COMMA DesignatorStatement 
            {
              DesignatorStatementList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorStatementList D1 = (DesignatorStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D2 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementListDerived1(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*DesignatorStatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OptionalDesignatorStatementFor ::= 
            {
              OptionalDesignatorStatementFor RESULT = null;
		 RESULT=new OptionalDesignatorStatementForDerived2(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*OptionalDesignatorStatementFor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OptionalDesignatorStatementFor ::= DesignatorStatementList 
            {
              OptionalDesignatorStatementFor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatementList D1 = (DesignatorStatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OptionalDesignatorStatementForDerived1(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*OptionalDesignatorStatementFor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // StatementRepeat ::= Statement 
            {
              StatementRepeat RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementRepeatDerived2(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*StatementRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // StatementRepeat ::= StatementRepeat Statement 
            {
              StatementRepeat RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementRepeat S1 = (StatementRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementRepeatDerived1(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*StatementRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ForDect ::= FOR 
            {
              ForDect RESULT = null;
		 RESULT=new ForDect(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*ForDect*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Statement ::= error SEMICOLON 
            {
              Statement RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);   RESULT=new ErrorStmtStatementSemicolon(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Statement ::= ForDect LPAREN OptionalDesignatorStatementFor SEMICOLON OptionalCondFactFor SEMICOLON OptionalDesignatorStatementFor RPAREN Statement 
            {
              Statement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		ForDect F1 = (ForDect)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		OptionalDesignatorStatementFor O2 = (OptionalDesignatorStatementFor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int O3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int O3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		OptionalCondFactFor O3 = (OptionalCondFactFor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int O4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int O4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		OptionalDesignatorStatementFor O4 = (OptionalDesignatorStatementFor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S5 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementFor(F1, O2, O3, O4, S5); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Statement ::= LCURLY StatementRepeat RCURLY 
            {
              Statement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementRepeat S1 = (StatementRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementCurlyStatement(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Statement ::= LCURLY RCURLY 
            {
              Statement RESULT = null;
		 RESULT=new EmptyStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Statement ::= PRINT LPAREN Expr COMMA NUMCONST RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintWithNumConstStatement(e, N1); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Statement ::= PRINT LPAREN Expr RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintStatement(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Statement ::= READ LPAREN Designator RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int dRetleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dRetright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator dRet = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ReadStatement(dRet); RESULT.setLine(dRetleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Statement ::= RETURN Expr SEMICOLON 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnStatement(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Statement ::= RETURN SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new ReturnEmptyStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new ContStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Statement ::= BREAK SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new BreakStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Statement ::= IF LPAREN Condition RPAREN Statement ELSE Statement 
            {
              Statement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S3 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementIfElse(C1, S2, S3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Statement ::= IF LPAREN Condition RPAREN Statement 
            {
              Statement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementIfNoElse(C1, S2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Statement ::= DesignatorStatement SEMICOLON 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDesign(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorComma ::= 
            {
              DesignatorComma RESULT = null;
		 RESULT=new NoDesignatorComma(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*DesignatorComma*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorComma ::= COMMA 
            {
              DesignatorComma RESULT = null;
		 RESULT=new DesignatorCommaOnly(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*DesignatorComma*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorComma ::= DesignatorComma Designator COMMA 
            {
              DesignatorComma RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorComma D1 = (DesignatorComma)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D2 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorCommaIncl(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*DesignatorComma*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorJul ::= Designator ASSIGN LSQUARE FOR Expr IN Designator IF Condition RSQUARE 
            {
              DesignatorJul RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesJulWithIf(D1, e, d, c); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*DesignatorJul*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesignatorJul ::= Designator ASSIGN LSQUARE FOR Expr IN Designator RSQUARE 
            {
              DesignatorJul RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesJulNoIf(D1, e, d); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*DesignatorJul*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DesignatorStatementPartTwo ::= LSQUARE DesignatorComma TIMES Designator RSQUARE ASSIGN Designator 
            {
              DesignatorStatementPartTwo RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		DesignatorComma D1 = (DesignatorComma)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int dDesLleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dDesLright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator dDesL = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int dDesRleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dDesRright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator dDesR = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementDepack(D1, dDesL, dDesR); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*DesignatorStatementPartTwo*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DesignatorStatementPartOne ::= DEC 
            {
              DesignatorStatementPartOne RESULT = null;
		 RESULT=new DesignatorStatementDec(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatementPartOne*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DesignatorStatementPartOne ::= INC 
            {
              DesignatorStatementPartOne RESULT = null;
		 RESULT=new DesignatorStatementInc(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatementPartOne*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DesignatorStatementPartOne ::= LPAREN ActParse RPAREN 
            {
              DesignatorStatementPartOne RESULT = null;
		int aPdleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int aPdright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParse aPd = (ActParse)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatementParen(aPd); RESULT.setLine(aPdleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatementPartOne*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DesignatorStatementPartOne ::= LPAREN RPAREN 
            {
              DesignatorStatementPartOne RESULT = null;
		 RESULT=new DesignatorStatementEmptyParen(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatementPartOne*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DesignatorStatementPartOne ::= ASSIGN Expr 
            {
              DesignatorStatementPartOne RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementAssign(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*DesignatorStatementPartOne*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DesignatorStatement ::= DesignatorJul 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorJul D1 = (DesignatorJul)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesJul(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DesignatorStatement ::= DesignatorStatementPartTwo 
            {
              DesignatorStatement RESULT = null;
		int dPTleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dPTright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatementPartTwo dPT = (DesignatorStatementPartTwo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStmntTwo(dPT); RESULT.setLine(dPTleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DesignatorStatement ::= Designator DesignatorStatementPartOne 
            {
              DesignatorStatement RESULT = null;
		int dDleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dDright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator dD = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int dPOleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dPOright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatementPartOne dPO = (DesignatorStatementPartOne)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStmntOne(dD, dPO); RESULT.setLine(dDleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Designator ::= DesignatorInner 
            {
              Designator RESULT = null;
		int desIleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int desIright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorInner desI = (DesignatorInner)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoDesignatorRepetable(desI); RESULT.setLine(desIleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Designator ::= Designator LSQUARE Expr RSQUARE 
            {
              Designator RESULT = null;
		int desDleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desDright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator desD = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorIdentBrackets(desD, E1); RESULT.setLine(desDleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Designator ::= Designator DOT IDENT 
            {
              Designator RESULT = null;
		int desDleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desDright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator desD = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorIdentDot(desD, I1); RESULT.setLine(desDleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DesignatorInner ::= IDENT 
            {
              DesignatorInner RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorRegular(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*DesignatorInner*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DesignatorInner ::= IDENT COLON COLON IDENT 
            {
              DesignatorInner RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I2 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorReach(I1, I2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*DesignatorInner*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RepetableActParse ::= 
            {
              RepetableActParse RESULT = null;
		 RESULT=new RepetableActParseEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*RepetableActParse*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RepetableActParse ::= COMMA Expr RepetableActParse 
            {
              RepetableActParse RESULT = null;
		int eRleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr eR = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		RepetableActParse R1 = (RepetableActParse)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RepetableActParseFull(eR, R1); RESULT.setLine(eRleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*RepetableActParse*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ActParse ::= Expr RepetableActParse 
            {
              ActParse RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		RepetableActParse rE = (RepetableActParse)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParse(e, rE); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*ActParse*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FactorNew ::= LPAREN RPAREN 
            {
              FactorNew RESULT = null;
		 RESULT=new FactorArrNoE(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*FactorNew*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FactorNew ::= LPAREN ActParse RPAREN 
            {
              FactorNew RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParse A1 = (ActParse)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorNewDerived1(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*FactorNew*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FactorNew ::= LSQUARE Expr RSQUARE 
            {
              FactorNew RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorArrHasE(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*FactorNew*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Factor ::= RANGE LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorRange(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new LRParFactor(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Factor ::= NEW Type FactorNew 
            {
              Factor RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FactorNew f = (FactorNew)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNewFac(t, f); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Factor ::= BOOLCONST 
            {
              Factor RESULT = null;
		int valBleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valBright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String valB = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorBool(valB); RESULT.setLine(valBleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Factor ::= CHARCONST 
            {
              Factor RESULT = null;
		int valCleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valCright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String valC = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorChar(valC); RESULT.setLine(valCleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Factor ::= NUMCONST 
            {
              Factor RESULT = null;
		int valNleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valNright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer valN = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNum(valN); RESULT.setLine(valNleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Factor ::= Designator LPAREN ActParse RPAREN 
            {
              Factor RESULT = null;
		int dDesBleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dDesBright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator dDesB = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParse A1 = (ActParse)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorDesignatorBrace(dDesB, A1); RESULT.setLine(dDesBleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Factor ::= Designator LPAREN RPAREN 
            {
              Factor RESULT = null;
		int dDesEleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dDesEright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator dDesE = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new FactorDesignatorEmptyBrace(dDesE); RESULT.setLine(dDesEleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int dDesFleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dDesFright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator dDesF = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDesignator(dDesF); RESULT.setLine(dDesFleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RepetableTerm ::= 
            {
              RepetableTerm RESULT = null;
		 RESULT=new NoRepTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*RepetableTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RepetableTerm ::= Mulop Factor RepetableTerm 
            {
              RepetableTerm RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Mulop M1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		RepetableTerm R2 = (RepetableTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RepetableTerminal(M1, f, R2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*RepetableTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Term ::= Factor RepetableTerm 
            {
              Term RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		RepetableTerm R1 = (RepetableTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Term(f, R1); RESULT.setLine(fleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Mulop ::= SLASH 
            {
              Mulop RESULT = null;
		 RESULT=new MulopSlash(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Mulop ::= TIMES 
            {
              Mulop RESULT = null;
		 RESULT=new MulopMul(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Mulop ::= PERCENT 
            {
              Mulop RESULT = null;
		 RESULT=new MulopPerc(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopMinus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopPlus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExprRepetable ::= 
            {
              ExprRepetable RESULT = null;
		 RESULT=new NoExpressionRepetable(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*ExprRepetable*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExprRepetable ::= Addop Term ExprRepetable 
            {
              ExprRepetable RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Addop A1 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ExprRepetable eR = (ExprRepetable)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExpressionRepetable(A1, t, eR); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*ExprRepetable*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= Term ExprRepetable 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ExprRepetable eR = (ExprRepetable)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Expression(t, eR); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= MINUS Term ExprRepetable 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int eRleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ExprRepetable eR = (ExprRepetable)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExpressionWithMinus(t, eR); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeNoColon(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= IDENT COLON COLON IDENT 
            {
              Type RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeWithColon(I1, typeName); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConstElem ::= NUMCONST 
            {
              ConstElem RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumConst(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ConstElem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConstElem ::= CHARCONST 
            {
              ConstElem RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String C1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ConstElem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstElem ::= BOOLCONST 
            {
              ConstElem RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String B1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BoolConst(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ConstElem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodVarDecl ::= 
            {
              MethodVarDecl RESULT = null;
		 RESULT=new NoMethodVarDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*MethodVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodVarDecl ::= VarDecl MethodVarDecl 
            {
              MethodVarDecl RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodVarDecl M2 = (MethodVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodVarDeclaration(V1, M2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*MethodVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarName ::= IDENT 
            {
              VarName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VariableName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*VarName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDeclRepeat ::= 
            {
              VarDeclRepeat RESULT = null;
		 RESULT=new NoVarDeclRepeat(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*VarDeclRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDeclRepeat ::= VarDeclRepeat COMMA VarName 
            {
              VarDeclRepeat RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclRepeat V1 = (VarDeclRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarName V2 = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclarationRepeat(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*VarDeclRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDeclRepeat ::= VarDeclRepeat COMMA VarName LSQUARE RSQUARE 
            {
              VarDeclRepeat RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		VarDeclRepeat V1 = (VarDeclRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarName V2 = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new VarDeclRepeatArr(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*VarDeclRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarDecl ::= Type VarName VarDeclRepeat SEMICOLON 
            {
              VarDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarName name = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclRepeat V1 = (VarDeclRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VariableDeclaration(t, name, V1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDecl ::= error SEMICOLON 
            {
              VarDecl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);   RESULT=new ErrorStmtVarDeclSemicolon(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecl ::= error COMMA 
            {
              VarDecl RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do , u liniji " + cleft, null);   RESULT=new ErrorStmtVarDeclComma(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= Type VarName LSQUARE RSQUARE VarDeclRepeat SEMICOLON 
            {
              VarDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		VarName name = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclRepeat V1 = (VarDeclRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VariableDeclarationArray(t, name, V1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RepeatConstDecl ::= 
            {
              RepeatConstDecl RESULT = null;
		 RESULT=new NoRepeatConstDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*RepeatConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RepeatConstDecl ::= COMMA ConstName ASSIGN ConstElem RepeatConstDecl 
            {
              RepeatConstDecl RESULT = null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ConstName cn = (ConstName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstElem c = (ConstElem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		RepeatConstDecl R1 = (RepeatConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RepeatingConstDecl(cn, c, R1); RESULT.setLine(cnleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*RepeatConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstName ::= IDENT 
            {
              ConstName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ConstName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDecl ::= CONST Type ConstName ASSIGN ConstElem RepeatConstDecl SEMICOLON 
            {
              ConstDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ConstName cn = (ConstName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstElem c = (ConstElem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		RepeatConstDecl R1 = (RepeatConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDeclaration(t, cn, c, R1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DeclNamespace ::= 
            {
              DeclNamespace RESULT = null;
		 RESULT=new NoDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclNamespace*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DeclNamespace ::= VarDecl DeclNamespace 
            {
              DeclNamespace RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DeclNamespace D2 = (DeclNamespace)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclVariable(V1, D2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclNamespace*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DeclNamespace ::= ConstDecl DeclNamespace 
            {
              DeclNamespace RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DeclNamespace D2 = (DeclNamespace)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DecleareConst(C1, D2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclNamespace*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeOrVoid ::= VOID 
            {
              TypeOrVoid RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object typeName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*TypeOrVoid*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeOrVoid ::= IDENT 
            {
              TypeOrVoid RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeHasType(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*TypeOrVoid*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormParamsRepeat ::= 
            {
              FormParamsRepeat RESULT = null;
		 RESULT=new NoRepeatFormParam(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*FormParamsRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FormParamsRepeat ::= COMMA Type FormName FormParamsRepeat 
            {
              FormParamsRepeat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FormName name = (FormName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParamsRepeat F1 = (FormParamsRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParamRepeat(t, name, F1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*FormParamsRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FormParamsRepeat ::= COMMA Type FormName LSQUARE RSQUARE FormParamsRepeat 
            {
              FormParamsRepeat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FormName name = (FormName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParamsRepeat F1 = (FormParamsRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParamRepeatArr(t, name, F1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*FormParamsRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FormName ::= IDENT 
            {
              FormName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*FormName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FormParams ::= 
            {
              FormParams RESULT = null;
		 RESULT=new NoFormParams(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*FormParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FormParams ::= Type FormName FormParamsRepeat 
            {
              FormParams RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FormName name = (FormName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParamsRepeat F1 = (FormParamsRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParamReg(t, name, F1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*FormParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FormParams ::= Type FormName LSQUARE RSQUARE FormParamsRepeat 
            {
              FormParams RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FormName name = (FormName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParamsRepeat F1 = (FormParamsRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParamArray(t, name, F1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*FormParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MethodName ::= TypeOrVoid IDENT 
            {
              MethodName RESULT = null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		TypeOrVoid retType = (TypeOrVoid)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodName(retType, name); RESULT.setLine(retTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*MethodName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MethodDecl ::= 
            {
              MethodDecl RESULT = null;
		 RESULT=new NoMethodDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MethodDecl ::= MethodDecl MethodName LPAREN FormParams RPAREN MethodVarDecl LCURLY RepeatStatement RCURLY 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		MethodDecl M1 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		MethodName methodName = (MethodName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FormParams F2 = (FormParams)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MethodVarDecl M3 = (MethodVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int R4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		RepeatStatement R4 = (RepeatStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclaration(M1, methodName, F2, M3, R4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Namespace ::= 
            {
              Namespace RESULT = null;
		 RESULT=new NoNamespace(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*Namespace*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Namespace ::= NAMESPACE IDENT LCURLY DeclNamespace LCURLY MethodDecl RCURLY RCURLY Namespace 
            {
              Namespace RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		DeclNamespace D2 = (DeclNamespace)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MethodDecl M3 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int N4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Namespace N4 = (Namespace)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new HasNamespace(I1, D2, M3, N4); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*Namespace*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgName(progName); RESULT.setLine(progNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName Namespace DeclNamespace LCURLY MethodDecl RCURLY 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ProgName p = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Namespace N1 = (Namespace)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DeclNamespace D2 = (DeclNamespace)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDecl M3 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(p, N1, D2, M3); RESULT.setLine(pleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

